[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "beast"
version = "0.0.0"  # Update the version according to your source
description = "Behavioral analysis via self-supervised pretraining of transformers"
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Yanchen Wang" },
    { name = "Matt Whiteway" },
]

keywords = ["machine learning", "deep learning", "computer_vision"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]

dependencies = [
    "imgaug",
    "jaxtyping",
    "lightning",
    "numpy (<2.0.0)",
    "opencv-python-headless",
    "pillow",
    "scikit-learn",
    "tensorboard",
    "torchvision",
    "tqdm",
    "typeguard (==2.13.3)",
    "transformers (==4.38.2)",
]

[project.urls]
repository = "https://github.com/paninski-lab/beast"
documentation = "https://github.com/paninski-lab/beast"


# project.dependencies are used for metadata when building the project, tool.poetry.dependencies is only used to enrich
# project.dependencies for locking
[tool.poetry.dependencies]
python = ">=3.10,<3.13"

[tool.poetry.scripts]
beast = "beast.cli.main:main"

[project.optional-dependencies]
dev = [
    "flake8-pyproject",
    "isort",
    "pytest",
    "pytest-html",
    "requests",
]

[tool.isort]
line_length = 99
profile = "black"
src_paths = ["beast", "tests"]

[tool.flake8]
max-line-length = 99
extend-ignore = ["E203", "W503", "F722"]  # Optional: common ignores for black compatibility
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv"
]

[tool.pytest.ini_options]
testpaths = "tests"
generate_report_on_test = "True"
markers = ["multigpu"]
